import React, { useState, useEffect, useCallback } from 'react';
import { 
  Bars3Icon, 
  XMarkIcon, 
  ChatBubbleLeftRightIcon, 
  Cog6ToothIcon, 
  UserCircleIcon,
  HomeIcon,
  ChartBarIcon,
  BellIcon,
  MagnifyingGlassIcon,
  PaperAirplaneIcon,
  ArrowPathIcon
} from '@heroicons/react/24/outline';
import { motion, AnimatePresence } from 'framer-motion';

function App() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [darkMode, setDarkMode] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [conversationId, setConversationId] = useState(null);
  const [selectedImage, setSelectedImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const fileInputRef = useRef(null);
  const messagesEndRef = React.useRef(null);
  
  // Auto-scroll to bottom of messages
  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // API base URL - update this to match your backend URL with the correct API prefix
  const API_BASE_URL = 'http://localhost:8000/api';

  // Function to send message to the backend
  const sendMessage = useCallback(async (message) => {
    setIsLoading(true);
    setIsSending(true);
    try {
      const response = await fetch(`${API_BASE_URL}/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          conversation_id: conversationId,
          chat_history: messages
            .filter(msg => msg.sender === 'user' || msg.sender === 'ai')
            .map(msg => ({
              role: msg.sender === 'user' ? 'user' : 'assistant',
              content: msg.text
            }))
        }),
      });

      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }

      const data = await response.json();
      
      // Update conversation ID if this is a new conversation
      if (data.conversation_id && !conversationId) {
        setConversationId(data.conversation_id);
      }

      // Extract the response text from the backend's nested response structure
      let responseText = '';
      
      if (data.message && data.message.response) {
        // If the response follows the expected nested structure
        responseText = data.message.response;
        
        // Update conversation ID if this is a new conversation
        if (data.message.conversation_id && !conversationId) {
          setConversationId(data.message.conversation_id);
        }
      } else if (data.response) {
        // Fallback to the old response format
        responseText = data.response;
      } else if (typeof data === 'object' && data !== null) {
        // If the response is an object, try to stringify it
        responseText = JSON.stringify(data, null, 2);
      } else {
        // Fallback to the raw data
        responseText = data;
      }

      // Add AI response to messages
      const aiMessage = {
        text: responseText,
        sender: 'ai',
        timestamp: new Date().toISOString()
      };
      
      // Add a small delay for better UX
      await new Promise(resolve => setTimeout(resolve, 800));
      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      console.error('Error sending message:', error);
      // Add error message to chat
      const errorMessage = {
        text: 'Sorry, I encountered an error. Please try again.',
        sender: 'ai',
        timestamp: new Date().toISOString(),
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      setIsSending(false);
    }
  }, [conversationId, messages]);

  // Handle sending a new message
  const handleSendMessage = useCallback(() => {
    if ((!inputMessage.trim() && !selectedImage) || isLoading) return;

    // Add user message to chat
    const userMessage = {
      text: inputMessage,
      sender: 'user',
      timestamp: new Date().toISOString(),
      image: imagePreview
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setSelectedImage(null);
    setImagePreview(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    
    // Send message to backend
    const formData = new FormData();
    formData.append('message', inputMessage);
    if (selectedImage) {
      formData.append('image', selectedImage);
    }
    
    // Here you would typically send the formData to your backend
    // For now, we'll just send the text message
    sendMessage(inputMessage);
  }, [inputMessage, isLoading, sendMessage, selectedImage, imagePreview]);

  // Handle new chat
  const handleNewChat = useCallback(() => {
    setMessages([]);
    setConversationId(null);
  }, []);

  // Toggle dark mode
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [darkMode]);

  const navigation = [
    { name: 'Dashboard', icon: 'home', current: activeTab === 'dashboard' },
    { name: 'Chat', icon: 'chat', current: activeTab === 'chat' },
    { name: 'Analytics', icon: 'chart-bar', current: activeTab === 'analytics' },
    { name: 'Settings', icon: 'cog', current: activeTab === 'settings' },
  ];
  
  // Animation variants
  const messageVariants = {
    hidden: { opacity: 0, y: 20, scale: 0.95 },
    visible: { 
      opacity: 1, 
      y: 0,
      scale: 1,
      transition: { 
        duration: 0.3,
        ease: [0.25, 0.1, 0.25, 1]
      }
    },
    exit: { 
      opacity: 0, 
      scale: 0.9,
      transition: { duration: 0.2 }
    }
  };
  
  const loadingDotVariants = {
    start: { y: '0%', opacity: 0.4 },
    end: { y: '-20%', opacity: 1 },
  };
  
  const loadingDotTransition = {
    duration: 0.8,
    repeat: Infinity,
    ease: 'easeInOut',
    repeatType: 'reverse',
    staggerChildren: 0.15
  };

  const getIcon = (iconName, active = false) => {
    const iconClass = `h-5 w-5 ${active ? 'text-indigo-600 dark:text-indigo-400' : 'text-gray-500 dark:text-gray-400'}`;
    
    switch(iconName) {
      case 'home':
        return <HomeIcon className={iconClass} />;
      case 'chat':
        return <ChatBubbleLeftRightIcon className={iconClass} />;
      case 'chart-bar':
        return <ChartBarIcon className={iconClass} />;
      case 'cog':
        return <Cog6ToothIcon className={iconClass} />;
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 transition-colors duration-200">
      {/* Mobile sidebar */}
      <div className={`fixed inset-0 z-40 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}>
        <div className="fixed inset-0 bg-gray-600 bg-opacity-75" onClick={() => setSidebarOpen(false)}></div>
        <div className="fixed inset-y-0 left-0 flex w-64 flex-col bg-white dark:bg-gray-800 shadow-xl">
          <div className="flex h-16 items-center justify-between border-b border-gray-200 dark:border-gray-700 px-4">
            <div className="flex items-center">
              <ChatBubbleLeftRightIcon className="h-8 w-8 text-indigo-600 dark:text-indigo-400" />
              <span className="ml-2 text-xl font-bold text-gray-900 dark:text-white">Naarad AI</span>
            </div>
            <button
              type="button"
              className="rounded-md p-2.5 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => setSidebarOpen(false)}
            >
              <XMarkIcon className="h-6 w-6" aria-hidden="true" />
            </button>
          </div>
          <nav className="flex-1 space-y-1 p-4">
            {navigation.map((item) => (
              <button
                key={item.name}
                onClick={() => {
                  setActiveTab(item.name.toLowerCase());
                  setSidebarOpen(false);
                }}
                className={`w-full flex items-center px-4 py-3 rounded-lg text-sm font-medium transition-colors ${
                  item.current
                    ? 'bg-indigo-50 text-indigo-700 dark:bg-indigo-900/30 dark:text-indigo-300'
                    : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700/50'
                }`}
              >
                {getIcon(item.icon, item.current)}
                <span className="ml-3">{item.name}</span>
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Static sidebar for desktop */}
      <div className="hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col">
        <div className="flex min-h-0 flex-1 flex-col border-r border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800">
          <div className="flex h-16 flex-shrink-0 items-center border-b border-gray-200 px-4 dark:border-gray-700">
            <div className="flex items-center">
              <ChatBubbleLeftRightIcon className="h-8 w-8 text-indigo-600 dark:text-indigo-400" />
              <span className="ml-2 text-xl font-bold text-gray-900 dark:text-white">Naarad AI</span>
            </div>
          </div>
          <div className="flex flex-1 flex-col overflow-y-auto pt-5 pb-4">
            <nav className="flex-1 space-y-1 px-4">
              {navigation.map((item) => (
                <button
                  key={item.name}
                  onClick={() => setActiveTab(item.name.toLowerCase())}
                  className={`w-full flex items-center px-4 py-3 rounded-lg text-sm font-medium transition-colors ${
                    item.current
                      ? 'bg-indigo-50 text-indigo-700 dark:bg-indigo-900/30 dark:text-indigo-300'
                      : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700/50'
                  }`}
                >
                  {getIcon(item.icon, item.current)}
                  <span className="ml-3">{item.name}</span>
                </button>
              ))}
            </nav>
          </div>
          <div className="flex flex-shrink-0 border-t border-gray-200 p-4 dark:border-gray-700">
            <button
              onClick={() => setDarkMode(!darkMode)}
              className="group block w-full flex-shrink-0 rounded-lg p-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700/50"
            >
              <div className="flex items-center">
                <div className="flex h-9 w-9 items-center justify-center rounded-full bg-indigo-100 dark:bg-indigo-900/30">
                  <Cog6ToothIcon className="h-5 w-5 text-indigo-700 dark:text-indigo-400" />
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-700 group-hover:text-gray-900 dark:text-gray-300 dark:group-hover:text-white">
                    {darkMode ? 'Light Mode' : 'Dark Mode'}
                  </p>
                </div>
              </div>
            </button>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="lg:pl-64">
        <div className="sticky top-0 z-10 flex h-16 flex-shrink-0 bg-white/80 backdrop-blur-sm dark:bg-gray-800/80 lg:border-b lg:border-gray-200 dark:border-gray-700">
          <button
            type="button"
            className="border-r border-gray-200 px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 lg:hidden"
            onClick={() => setSidebarOpen(true)}
          >
            <span className="sr-only">Open sidebar</span>
            <Bars3Icon className="h-6 w-6" aria-hidden="true" />
          </button>
          <div className="flex flex-1 justify-between px-4">
            <div className="flex flex-1">
              <div className="flex w-full max-w-lg lg:max-w-xs">
                <div className="relative w-full">
                  <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                    <MagnifyingGlassIcon className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="text"
                    className="block w-full rounded-lg border-0 bg-white py-2 pl-10 pr-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-500 dark:bg-gray-700 dark:text-white dark:ring-gray-600 dark:placeholder-gray-400 sm:text-sm sm:leading-6"
                    placeholder="Search..."
                  />
                </div>
              </div>
            </div>
            <div className="ml-4 flex items-center lg:ml-6">
              <button
                type="button"
                className="rounded-full bg-white p-1 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:bg-gray-800 dark:hover:text-gray-300"
              >
                <span className="sr-only">View notifications</span>
                <BellIcon className="h-6 w-6" />
              </button>
              <div className="relative ml-3">
                <div>
                  <button
                    type="button"
                    className="flex max-w-xs items-center rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:bg-gray-800"
                  >
                    <span className="sr-only">Open user menu</span>
                    <UserCircleIcon className="h-8 w-8 text-gray-400" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <main className="py-6">
          <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div className="py-4">
              <h1 className="text-2xl font-semibold text-gray-900 dark:text-white">
                {navigation.find((item) => item.current)?.name || 'Dashboard'}
              </h1>
            </div>

            {/* Main content area */}
            <div className="rounded-xl bg-white p-6 shadow-sm dark:bg-gray-800/50 dark:ring-1 dark:ring-gray-700">
              <div className="h-96 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600">
                <div className="flex h-full items-center justify-center">
                  <div className="text-center">
                    <ChatBubbleLeftRightIcon className="mx-auto h-12 w-12 text-gray-400" />
                    <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">
                      {activeTab === 'dashboard' && 'Welcome to Naarad AI Dashboard'}
                      {activeTab === 'chat' && 'Start a new conversation'}
                      {activeTab === 'analytics' && 'View your analytics'}
                      {activeTab === 'settings' && 'Configure your settings'}
                    </h3>
                    <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                      {activeTab === 'dashboard' && 'Get started by selecting an option from the sidebar'}
                      {activeTab === 'chat' && 'Type a message to begin chatting with Naarad AI'}
                      {activeTab === 'analytics' && 'Your usage statistics and insights will appear here'}
                      {activeTab === 'settings' && 'Customize your experience and preferences'}
                    </p>
                    {activeTab === 'chat' && (
                      <div className="flex flex-col h-full">
                        <div className="flex justify-between items-center mb-4">
                          <h2 className="text-lg font-medium text-gray-900 dark:text-white">Chat</h2>
                          <button
                            type="button"
                            onClick={handleNewChat}
                            disabled={isLoading}
                            className="inline-flex items-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                          >
                            New Chat
                          </button>
                        </div>
                        
                        <div className="flex-1 overflow-y-auto px-4 py-6 space-y-4 w-full">
                          {messages.length === 0 ? (
                            <motion.div 
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              className="text-center text-gray-500 dark:text-gray-400 py-12"
                            >
                              <ChatBubbleLeftRightIcon className="mx-auto h-12 w-12 mb-3 text-gray-300 dark:text-gray-600" />
                              <p className="text-lg font-medium text-gray-400 dark:text-gray-500">No messages yet</p>
                              <p className="text-sm mt-1">Start a conversation with Naarad AI</p>
                            </motion.div>
                          ) : (
                            <AnimatePresence>
                              {messages.map((msg, index) => (
                                <motion.div
                                  key={`${msg.timestamp}-${index}`}
                                  initial="hidden"
                                  animate="visible"
                                  exit="exit"
                                  variants={messageVariants}
                                  className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                                >
                                  <div 
                                  className={`relative max-w-xs lg:max-w-md px-4 py-3 ${
                                    msg.sender === 'user' 
                                      ? 'bg-indigo-600 text-white rounded-2xl rounded-tr-none' 
                                      : msg.isError
                                        ? 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 rounded-2xl rounded-tl-none'
                                        : 'bg-white dark:bg-gray-700/80 text-gray-800 dark:text-gray-200 rounded-2xl rounded-tl-none shadow-sm border border-gray-100 dark:border-gray-600/50'
                                  }`}
                                >
                                  {msg.sender !== 'user' && !msg.isError && (
                                    <div className="absolute -left-2 top-0 w-4 h-4 overflow-hidden">
                                      <div className="absolute w-4 h-4 bg-white dark:bg-gray-700/80 rotate-45 transform origin-bottom-left -translate-x-1/2 -translate-y-1/2 border-l border-t border-gray-100 dark:border-gray-600/50"></div>
                                    </div>
                                  )}
                                  {msg.sender === 'user' && (
                                    <div className="absolute -right-2 top-0 w-4 h-4 overflow-hidden">
                                      <div className="absolute w-4 h-4 bg-indigo-600 rotate-45 transform origin-bottom-right translate-x-1/2 -translate-y-1/2"></div>
                                    </div>
                                  )}
                                  <p className="text-sm whitespace-pre-wrap leading-relaxed">{msg.text}</p>
                                  <div className={`flex items-center mt-2 space-x-1.5 ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                                    <p className="text-xs opacity-70">
                                      {new Date(msg.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                                    </p>
                                    {msg.sender === 'user' && (
                                      <span className="text-xs opacity-70">
                                        {msg.isError ? (
                                          <span className="text-red-400">⚠️</span>
                                        ) : (
                                          <svg className="w-3 h-3 text-indigo-300" fill="currentColor" viewBox="0 0 20 20">
                                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                          </svg>
                                        )}
                                      </span>
                                    )}
                                  </div>
                                  </div>
                                </motion.div>
                              ))}
                              {isSending && (
                                <motion.div
                                  initial="hidden"
                                  animate="visible"
                                  variants={messageVariants}
                                  className="flex justify-start"
                                >
                                  <div className="bg-white dark:bg-gray-700/80 px-4 py-3 rounded-2xl rounded-tl-none shadow-sm border border-gray-100 dark:border-gray-600/50">
                                    <div className="absolute -left-2 top-0 w-4 h-4 overflow-hidden">
                                      <div className="absolute w-4 h-4 bg-white dark:bg-gray-700/80 rotate-45 transform origin-bottom-left -translate-x-1/2 -translate-y-1/2 border-l border-t border-gray-100 dark:border-gray-600/50"></div>
                                    </div>
                                    <div className="flex space-x-1.5 items-center">
                                      <motion.span
                                        className="w-1.5 h-1.5 bg-indigo-400 rounded-full"
                                        variants={loadingDotVariants}
                                        transition={loadingDotTransition}
                                        initial="start"
                                        animate="end"
                                      />
                                      <motion.span
                                        className="w-1.5 h-1.5 bg-indigo-500 rounded-full"
                                        variants={loadingDotVariants}
                                        transition={loadingDotTransition}
                                        initial="start"
                                        animate="end"
                                      />
                                      <motion.span
                                        className="w-1.5 h-1.5 bg-indigo-600 rounded-full"
                                        variants={loadingDotVariants}
                                        transition={loadingDotTransition}
                                        initial="start"
                                        animate="end"
                                      />
                                    </div>
                                  </div>
                                </motion.div>
                              )}
                              <div ref={messagesEndRef} />
                            </AnimatePresence>
                          )}
                        </div>
                        
                        <div className="mt-auto">
                          <div className="flex items-center">
                            <motion.div 
                                  ) : (
                                    <svg className="w-3 h-3 text-indigo-300" fill="currentColor" viewBox="0 0 20 20">
                                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                    </svg>
                                  )}
                                </span>
                              )}
                            </div>
                            </div>
                          </motion.div>
                        ))}
                        {isSending && (
                          <motion.div
                            initial="hidden"
                            animate="visible"
                            variants={messageVariants}
                            className="flex justify-start"
                          >
                            <div className="bg-white dark:bg-gray-700/80 px-4 py-3 rounded-2xl rounded-tl-none shadow-sm border border-gray-100 dark:border-gray-600/50">
                              <div className="absolute -left-2 top-0 w-4 h-4 overflow-hidden">
                                <div className="absolute w-4 h-4 bg-white dark:bg-gray-700/80 rotate-45 transform origin-bottom-left -translate-x-1/2 -translate-y-1/2 border-l border-t border-gray-100 dark:border-gray-600/50"></div>
                              </div>
                              <div className="flex space-x-1.5 items-center">
                                <motion.span
                                  className="w-1.5 h-1.5 bg-indigo-400 rounded-full"
                                  variants={loadingDotVariants}
                                  transition={loadingDotTransition}
                                  initial="start"
                                  animate="end"
                                />
                                <motion.span
                                  className="w-1.5 h-1.5 bg-indigo-500 rounded-full"
                                  variants={loadingDotVariants}
                                  transition={loadingDotTransition}
                                  initial="start"
                                  animate="end"
                                />
                                <motion.span
                                  className="w-1.5 h-1.5 bg-indigo-600 rounded-full"
                                  variants={loadingDotVariants}
                                  transition={loadingDotTransition}
                                  initial="start"
                                  animate="end"
                                />
                              </div>
                            </div>
                          </motion.div>
                        )}
                        <div ref={messagesEndRef} />
                      </AnimatePresence>
                    )}
                  </div>
                  
                  <div className="mt-auto">
                    <div className="flex items-center">
                      <motion.div 
                        className="mt-6 px-2 w-full"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.2 }}
                      >
                        <div className="w-full space-y-2">
                          {imagePreview && (
                            <div className="relative inline-block">
                              <img 
                                src={imagePreview} 
                                alt="Preview" 
                                className="h-32 w-auto rounded-lg object-cover border border-gray-200 dark:border-gray-600"
                              />
                              <button
                                onClick={removeImage}
                                className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors"
                                aria-label="Remove image"
                              >
                                <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                              <p className="mt-3 text-xs text-center text-gray-400 dark:text-gray-500 px-4">
                              <span className="inline-flex items-center">
                                <svg className="w-3 h-3 mr-1.5" fill="currentColor" viewBox="0 0 20 20">
                                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h.01a1 1 0 100-2H10V9z" clipRule="evenodd" />
                                </svg>
                                Naarad AI may produce inaccurate information. Consider verifying important details.
                              </span>
                            </p>
                            </motion.div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}

export default App;
